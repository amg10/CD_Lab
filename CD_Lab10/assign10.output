Terminals unused in grammar

    COMMA
    DEF
    DOT
    EXITLOOP
    FLOAT
    FLOAT_CONST
    FORMAT
    FROM
    FUN
    INT
    LEFT_SQ_BKT
    NUL
    PRODUCT
    RETURN
    RETURNS
    RIGHT_SQ_BKT
    SKIP
    STEP
    STRING
    TO


Grammar

    0 $accept: prog $end

    1 prog: GLOBAL stmtListO END

    2 stmtListO: stmtList
    3          | %empty

    4 stmtList: stmtList SEMICOLON stmt
    5         | stmt

    6 stmt: assignmentStmt
    7     | readStmt
    8     | printStmt
    9     | ifStmt
   10     | whileStmt

   11 assignmentStmt: ID ASSIGN exp

   12 readStmt: READ ID

   13 printStmt: PRINT ID

   14 $@1: %empty

   15 ifStmt: IF bExp $@1 COLON stmtList elsePart END

   16 $@2: %empty

   17 elsePart: ELSE $@2 stmtList
   18         | %empty

   19 $@3: %empty

   20 $@4: %empty

   21 $@5: %empty

   22 whileStmt: WHILE $@3 bExp $@4 COLON stmtList $@5 END

   23 bExp: bExp OR bExp
   24     | bExp AND bExp
   25     | NOT bExp
   26     | LEFT_PAREN bExp RIGHT_PAREN
   27     | exp relOP exp

   28 relOP: EQ
   29      | LE
   30      | LT
   31      | GE
   32      | GT
   33      | NE

   34 exp: exp PLUS exp
   35    | exp MINUS exp
   36    | exp MULT exp
   37    | exp DIV exp
   38    | exp MOD exp
   39    | MINUS exp
   40    | PLUS exp
   41    | LEFT_PAREN exp RIGHT_PAREN
   42    | ID
   43    | INT_CONST


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    AND (258) 24
    ASSIGN (259) 11
    COLON (260) 15 22
    COMMA (261)
    DEF (262)
    DIV (263) 37
    DOT (264)
    ELSE (265) 17
    END (266) 1 15 22
    EQ (267) 28
    EXITLOOP (268)
    FLOAT (269)
    FLOAT_CONST (270)
    FORMAT (271)
    FROM (272)
    FUN (273)
    GE (274) 31
    GLOBAL (275) 1
    GT (276) 32
    IF (277) 15
    INT (278)
    LEFT_PAREN (279) 26 41
    LEFT_SQ_BKT (280)
    LE (281) 29
    LT (282) 30
    MINUS (283) 35 39
    MOD (284) 38
    MULT (285) 36
    NE (286) 33
    NOT (287) 25
    NUL (288)
    OR (289) 23
    PLUS (290) 34 40
    PRINT (291) 13
    PRODUCT (292)
    READ (293) 12
    RETURN (294)
    RETURNS (295)
    RIGHT_PAREN (296) 26 41
    RIGHT_SQ_BKT (297)
    SEMICOLON (298) 4
    SKIP (299)
    STEP (300)
    STRING (301)
    TO (302)
    WHILE (303) 22
    ID <val> (304) 11 12 13 42
    INT_CONST <val> (305) 43


Nonterminals, with rules where they appear

    $accept (51)
        on left: 0
    prog (52)
        on left: 1
        on right: 0
    stmtListO (53)
        on left: 2 3
        on right: 1
    stmtList (54)
        on left: 4 5
        on right: 2 4 15 17 22
    stmt (55)
        on left: 6 7 8 9 10
        on right: 4 5
    assignmentStmt (56)
        on left: 11
        on right: 6
    readStmt (57)
        on left: 12
        on right: 7
    printStmt (58)
        on left: 13
        on right: 8
    ifStmt (59)
        on left: 15
        on right: 9
    $@1 (60)
        on left: 14
        on right: 15
    elsePart (61)
        on left: 17 18
        on right: 15
    $@2 (62)
        on left: 16
        on right: 17
    whileStmt (63)
        on left: 22
        on right: 10
    $@3 (64)
        on left: 19
        on right: 22
    $@4 (65)
        on left: 20
        on right: 22
    $@5 (66)
        on left: 21
        on right: 22
    bExp <val> (67)
        on left: 23 24 25 26 27
        on right: 15 22 23 24 25 26
    relOP <val> (68)
        on left: 28 29 30 31 32 33
        on right: 27
    exp <val> (69)
        on left: 34 35 36 37 38 39 40 41 42 43
        on right: 11 27 34 35 36 37 38 39 40 41


State 0

    0 $accept: . prog $end

    GLOBAL  shift, and go to state 1

    prog  go to state 2


State 1

    1 prog: GLOBAL . stmtListO END

    IF     shift, and go to state 3
    PRINT  shift, and go to state 4
    READ   shift, and go to state 5
    WHILE  shift, and go to state 6
    ID     shift, and go to state 7

    $default  reduce using rule 3 (stmtListO)

    stmtListO       go to state 8
    stmtList        go to state 9
    stmt            go to state 10
    assignmentStmt  go to state 11
    readStmt        go to state 12
    printStmt       go to state 13
    ifStmt          go to state 14
    whileStmt       go to state 15


State 2

    0 $accept: prog . $end

    $end  shift, and go to state 16


State 3

   15 ifStmt: IF . bExp $@1 COLON stmtList elsePart END

    LEFT_PAREN  shift, and go to state 17
    MINUS       shift, and go to state 18
    NOT         shift, and go to state 19
    PLUS        shift, and go to state 20
    ID          shift, and go to state 21
    INT_CONST   shift, and go to state 22

    bExp  go to state 23
    exp   go to state 24


State 4

   13 printStmt: PRINT . ID

    ID  shift, and go to state 25


State 5

   12 readStmt: READ . ID

    ID  shift, and go to state 26


State 6

   22 whileStmt: WHILE . $@3 bExp $@4 COLON stmtList $@5 END

    $default  reduce using rule 19 ($@3)

    $@3  go to state 27


State 7

   11 assignmentStmt: ID . ASSIGN exp

    ASSIGN  shift, and go to state 28


State 8

    1 prog: GLOBAL stmtListO . END

    END  shift, and go to state 29


State 9

    2 stmtListO: stmtList .
    4 stmtList: stmtList . SEMICOLON stmt

    SEMICOLON  shift, and go to state 30

    $default  reduce using rule 2 (stmtListO)


State 10

    5 stmtList: stmt .

    $default  reduce using rule 5 (stmtList)


State 11

    6 stmt: assignmentStmt .

    $default  reduce using rule 6 (stmt)


State 12

    7 stmt: readStmt .

    $default  reduce using rule 7 (stmt)


State 13

    8 stmt: printStmt .

    $default  reduce using rule 8 (stmt)


State 14

    9 stmt: ifStmt .

    $default  reduce using rule 9 (stmt)


State 15

   10 stmt: whileStmt .

    $default  reduce using rule 10 (stmt)


State 16

    0 $accept: prog $end .

    $default  accept


State 17

   26 bExp: LEFT_PAREN . bExp RIGHT_PAREN
   41 exp: LEFT_PAREN . exp RIGHT_PAREN

    LEFT_PAREN  shift, and go to state 17
    MINUS       shift, and go to state 18
    NOT         shift, and go to state 19
    PLUS        shift, and go to state 20
    ID          shift, and go to state 21
    INT_CONST   shift, and go to state 22

    bExp  go to state 31
    exp   go to state 32


State 18

   39 exp: MINUS . exp

    LEFT_PAREN  shift, and go to state 33
    MINUS       shift, and go to state 18
    PLUS        shift, and go to state 20
    ID          shift, and go to state 21
    INT_CONST   shift, and go to state 22

    exp  go to state 34


State 19

   25 bExp: NOT . bExp

    LEFT_PAREN  shift, and go to state 17
    MINUS       shift, and go to state 18
    NOT         shift, and go to state 19
    PLUS        shift, and go to state 20
    ID          shift, and go to state 21
    INT_CONST   shift, and go to state 22

    bExp  go to state 35
    exp   go to state 24


State 20

   40 exp: PLUS . exp

    LEFT_PAREN  shift, and go to state 33
    MINUS       shift, and go to state 18
    PLUS        shift, and go to state 20
    ID          shift, and go to state 21
    INT_CONST   shift, and go to state 22

    exp  go to state 36


State 21

   42 exp: ID .

    $default  reduce using rule 42 (exp)


State 22

   43 exp: INT_CONST .

    $default  reduce using rule 43 (exp)


State 23

   15 ifStmt: IF bExp . $@1 COLON stmtList elsePart END
   23 bExp: bExp . OR bExp
   24     | bExp . AND bExp

    AND  shift, and go to state 37
    OR   shift, and go to state 38

    $default  reduce using rule 14 ($@1)

    $@1  go to state 39


State 24

   27 bExp: exp . relOP exp
   34 exp: exp . PLUS exp
   35    | exp . MINUS exp
   36    | exp . MULT exp
   37    | exp . DIV exp
   38    | exp . MOD exp

    DIV    shift, and go to state 40
    EQ     shift, and go to state 41
    GE     shift, and go to state 42
    GT     shift, and go to state 43
    LE     shift, and go to state 44
    LT     shift, and go to state 45
    MINUS  shift, and go to state 46
    MOD    shift, and go to state 47
    MULT   shift, and go to state 48
    NE     shift, and go to state 49
    PLUS   shift, and go to state 50

    relOP  go to state 51


State 25

   13 printStmt: PRINT ID .

    $default  reduce using rule 13 (printStmt)


State 26

   12 readStmt: READ ID .

    $default  reduce using rule 12 (readStmt)


State 27

   22 whileStmt: WHILE $@3 . bExp $@4 COLON stmtList $@5 END

    LEFT_PAREN  shift, and go to state 17
    MINUS       shift, and go to state 18
    NOT         shift, and go to state 19
    PLUS        shift, and go to state 20
    ID          shift, and go to state 21
    INT_CONST   shift, and go to state 22

    bExp  go to state 52
    exp   go to state 24


State 28

   11 assignmentStmt: ID ASSIGN . exp

    LEFT_PAREN  shift, and go to state 33
    MINUS       shift, and go to state 18
    PLUS        shift, and go to state 20
    ID          shift, and go to state 21
    INT_CONST   shift, and go to state 22

    exp  go to state 53


State 29

    1 prog: GLOBAL stmtListO END .

    $default  reduce using rule 1 (prog)


State 30

    4 stmtList: stmtList SEMICOLON . stmt

    IF     shift, and go to state 3
    PRINT  shift, and go to state 4
    READ   shift, and go to state 5
    WHILE  shift, and go to state 6
    ID     shift, and go to state 7

    stmt            go to state 54
    assignmentStmt  go to state 11
    readStmt        go to state 12
    printStmt       go to state 13
    ifStmt          go to state 14
    whileStmt       go to state 15


State 31

   23 bExp: bExp . OR bExp
   24     | bExp . AND bExp
   26     | LEFT_PAREN bExp . RIGHT_PAREN

    AND          shift, and go to state 37
    OR           shift, and go to state 38
    RIGHT_PAREN  shift, and go to state 55


State 32

   27 bExp: exp . relOP exp
   34 exp: exp . PLUS exp
   35    | exp . MINUS exp
   36    | exp . MULT exp
   37    | exp . DIV exp
   38    | exp . MOD exp
   41    | LEFT_PAREN exp . RIGHT_PAREN

    DIV          shift, and go to state 40
    EQ           shift, and go to state 41
    GE           shift, and go to state 42
    GT           shift, and go to state 43
    LE           shift, and go to state 44
    LT           shift, and go to state 45
    MINUS        shift, and go to state 46
    MOD          shift, and go to state 47
    MULT         shift, and go to state 48
    NE           shift, and go to state 49
    PLUS         shift, and go to state 50
    RIGHT_PAREN  shift, and go to state 56

    relOP  go to state 51


State 33

   41 exp: LEFT_PAREN . exp RIGHT_PAREN

    LEFT_PAREN  shift, and go to state 33
    MINUS       shift, and go to state 18
    PLUS        shift, and go to state 20
    ID          shift, and go to state 21
    INT_CONST   shift, and go to state 22

    exp  go to state 57


State 34

   34 exp: exp . PLUS exp
   35    | exp . MINUS exp
   36    | exp . MULT exp
   37    | exp . DIV exp
   38    | exp . MOD exp
   39    | MINUS exp .

    DIV   shift, and go to state 40
    MOD   shift, and go to state 47
    MULT  shift, and go to state 48

    $default  reduce using rule 39 (exp)


State 35

   23 bExp: bExp . OR bExp
   24     | bExp . AND bExp
   25     | NOT bExp .

    $default  reduce using rule 25 (bExp)


State 36

   34 exp: exp . PLUS exp
   35    | exp . MINUS exp
   36    | exp . MULT exp
   37    | exp . DIV exp
   38    | exp . MOD exp
   40    | PLUS exp .

    DIV   shift, and go to state 40
    MOD   shift, and go to state 47
    MULT  shift, and go to state 48

    $default  reduce using rule 40 (exp)


State 37

   24 bExp: bExp AND . bExp

    LEFT_PAREN  shift, and go to state 17
    MINUS       shift, and go to state 18
    NOT         shift, and go to state 19
    PLUS        shift, and go to state 20
    ID          shift, and go to state 21
    INT_CONST   shift, and go to state 22

    bExp  go to state 58
    exp   go to state 24


State 38

   23 bExp: bExp OR . bExp

    LEFT_PAREN  shift, and go to state 17
    MINUS       shift, and go to state 18
    NOT         shift, and go to state 19
    PLUS        shift, and go to state 20
    ID          shift, and go to state 21
    INT_CONST   shift, and go to state 22

    bExp  go to state 59
    exp   go to state 24


State 39

   15 ifStmt: IF bExp $@1 . COLON stmtList elsePart END

    COLON  shift, and go to state 60


State 40

   37 exp: exp DIV . exp

    LEFT_PAREN  shift, and go to state 33
    MINUS       shift, and go to state 18
    PLUS        shift, and go to state 20
    ID          shift, and go to state 21
    INT_CONST   shift, and go to state 22

    exp  go to state 61


State 41

   28 relOP: EQ .

    $default  reduce using rule 28 (relOP)


State 42

   31 relOP: GE .

    $default  reduce using rule 31 (relOP)


State 43

   32 relOP: GT .

    $default  reduce using rule 32 (relOP)


State 44

   29 relOP: LE .

    $default  reduce using rule 29 (relOP)


State 45

   30 relOP: LT .

    $default  reduce using rule 30 (relOP)


State 46

   35 exp: exp MINUS . exp

    LEFT_PAREN  shift, and go to state 33
    MINUS       shift, and go to state 18
    PLUS        shift, and go to state 20
    ID          shift, and go to state 21
    INT_CONST   shift, and go to state 22

    exp  go to state 62


State 47

   38 exp: exp MOD . exp

    LEFT_PAREN  shift, and go to state 33
    MINUS       shift, and go to state 18
    PLUS        shift, and go to state 20
    ID          shift, and go to state 21
    INT_CONST   shift, and go to state 22

    exp  go to state 63


State 48

   36 exp: exp MULT . exp

    LEFT_PAREN  shift, and go to state 33
    MINUS       shift, and go to state 18
    PLUS        shift, and go to state 20
    ID          shift, and go to state 21
    INT_CONST   shift, and go to state 22

    exp  go to state 64


State 49

   33 relOP: NE .

    $default  reduce using rule 33 (relOP)


State 50

   34 exp: exp PLUS . exp

    LEFT_PAREN  shift, and go to state 33
    MINUS       shift, and go to state 18
    PLUS        shift, and go to state 20
    ID          shift, and go to state 21
    INT_CONST   shift, and go to state 22

    exp  go to state 65


State 51

   27 bExp: exp relOP . exp

    LEFT_PAREN  shift, and go to state 33
    MINUS       shift, and go to state 18
    PLUS        shift, and go to state 20
    ID          shift, and go to state 21
    INT_CONST   shift, and go to state 22

    exp  go to state 66


State 52

   22 whileStmt: WHILE $@3 bExp . $@4 COLON stmtList $@5 END
   23 bExp: bExp . OR bExp
   24     | bExp . AND bExp

    AND  shift, and go to state 37
    OR   shift, and go to state 38

    $default  reduce using rule 20 ($@4)

    $@4  go to state 67


State 53

   11 assignmentStmt: ID ASSIGN exp .
   34 exp: exp . PLUS exp
   35    | exp . MINUS exp
   36    | exp . MULT exp
   37    | exp . DIV exp
   38    | exp . MOD exp

    DIV    shift, and go to state 40
    MINUS  shift, and go to state 46
    MOD    shift, and go to state 47
    MULT   shift, and go to state 48
    PLUS   shift, and go to state 50

    $default  reduce using rule 11 (assignmentStmt)


State 54

    4 stmtList: stmtList SEMICOLON stmt .

    $default  reduce using rule 4 (stmtList)


State 55

   26 bExp: LEFT_PAREN bExp RIGHT_PAREN .

    $default  reduce using rule 26 (bExp)


State 56

   41 exp: LEFT_PAREN exp RIGHT_PAREN .

    $default  reduce using rule 41 (exp)


State 57

   34 exp: exp . PLUS exp
   35    | exp . MINUS exp
   36    | exp . MULT exp
   37    | exp . DIV exp
   38    | exp . MOD exp
   41    | LEFT_PAREN exp . RIGHT_PAREN

    DIV          shift, and go to state 40
    MINUS        shift, and go to state 46
    MOD          shift, and go to state 47
    MULT         shift, and go to state 48
    PLUS         shift, and go to state 50
    RIGHT_PAREN  shift, and go to state 56


State 58

   23 bExp: bExp . OR bExp
   24     | bExp . AND bExp
   24     | bExp AND bExp .

    $default  reduce using rule 24 (bExp)


State 59

   23 bExp: bExp . OR bExp
   23     | bExp OR bExp .
   24     | bExp . AND bExp

    $default  reduce using rule 23 (bExp)


State 60

   15 ifStmt: IF bExp $@1 COLON . stmtList elsePart END

    IF     shift, and go to state 3
    PRINT  shift, and go to state 4
    READ   shift, and go to state 5
    WHILE  shift, and go to state 6
    ID     shift, and go to state 7

    stmtList        go to state 68
    stmt            go to state 10
    assignmentStmt  go to state 11
    readStmt        go to state 12
    printStmt       go to state 13
    ifStmt          go to state 14
    whileStmt       go to state 15


State 61

   34 exp: exp . PLUS exp
   35    | exp . MINUS exp
   36    | exp . MULT exp
   37    | exp . DIV exp
   37    | exp DIV exp .
   38    | exp . MOD exp

    $default  reduce using rule 37 (exp)


State 62

   34 exp: exp . PLUS exp
   35    | exp . MINUS exp
   35    | exp MINUS exp .
   36    | exp . MULT exp
   37    | exp . DIV exp
   38    | exp . MOD exp

    DIV   shift, and go to state 40
    MOD   shift, and go to state 47
    MULT  shift, and go to state 48

    $default  reduce using rule 35 (exp)


State 63

   34 exp: exp . PLUS exp
   35    | exp . MINUS exp
   36    | exp . MULT exp
   37    | exp . DIV exp
   38    | exp . MOD exp
   38    | exp MOD exp .

    $default  reduce using rule 38 (exp)


State 64

   34 exp: exp . PLUS exp
   35    | exp . MINUS exp
   36    | exp . MULT exp
   36    | exp MULT exp .
   37    | exp . DIV exp
   38    | exp . MOD exp

    $default  reduce using rule 36 (exp)


State 65

   34 exp: exp . PLUS exp
   34    | exp PLUS exp .
   35    | exp . MINUS exp
   36    | exp . MULT exp
   37    | exp . DIV exp
   38    | exp . MOD exp

    DIV   shift, and go to state 40
    MOD   shift, and go to state 47
    MULT  shift, and go to state 48

    $default  reduce using rule 34 (exp)


State 66

   27 bExp: exp relOP exp .
   34 exp: exp . PLUS exp
   35    | exp . MINUS exp
   36    | exp . MULT exp
   37    | exp . DIV exp
   38    | exp . MOD exp

    DIV    shift, and go to state 40
    MINUS  shift, and go to state 46
    MOD    shift, and go to state 47
    MULT   shift, and go to state 48
    PLUS   shift, and go to state 50

    $default  reduce using rule 27 (bExp)


State 67

   22 whileStmt: WHILE $@3 bExp $@4 . COLON stmtList $@5 END

    COLON  shift, and go to state 69


State 68

    4 stmtList: stmtList . SEMICOLON stmt
   15 ifStmt: IF bExp $@1 COLON stmtList . elsePart END

    ELSE       shift, and go to state 70
    SEMICOLON  shift, and go to state 30

    $default  reduce using rule 18 (elsePart)

    elsePart  go to state 71


State 69

   22 whileStmt: WHILE $@3 bExp $@4 COLON . stmtList $@5 END

    IF     shift, and go to state 3
    PRINT  shift, and go to state 4
    READ   shift, and go to state 5
    WHILE  shift, and go to state 6
    ID     shift, and go to state 7

    stmtList        go to state 72
    stmt            go to state 10
    assignmentStmt  go to state 11
    readStmt        go to state 12
    printStmt       go to state 13
    ifStmt          go to state 14
    whileStmt       go to state 15


State 70

   17 elsePart: ELSE . $@2 stmtList

    $default  reduce using rule 16 ($@2)

    $@2  go to state 73


State 71

   15 ifStmt: IF bExp $@1 COLON stmtList elsePart . END

    END  shift, and go to state 74


State 72

    4 stmtList: stmtList . SEMICOLON stmt
   22 whileStmt: WHILE $@3 bExp $@4 COLON stmtList . $@5 END

    SEMICOLON  shift, and go to state 30

    $default  reduce using rule 21 ($@5)

    $@5  go to state 75


State 73

   17 elsePart: ELSE $@2 . stmtList

    IF     shift, and go to state 3
    PRINT  shift, and go to state 4
    READ   shift, and go to state 5
    WHILE  shift, and go to state 6
    ID     shift, and go to state 7

    stmtList        go to state 76
    stmt            go to state 10
    assignmentStmt  go to state 11
    readStmt        go to state 12
    printStmt       go to state 13
    ifStmt          go to state 14
    whileStmt       go to state 15


State 74

   15 ifStmt: IF bExp $@1 COLON stmtList elsePart END .

    $default  reduce using rule 15 (ifStmt)


State 75

   22 whileStmt: WHILE $@3 bExp $@4 COLON stmtList $@5 . END

    END  shift, and go to state 77


State 76

    4 stmtList: stmtList . SEMICOLON stmt
   17 elsePart: ELSE $@2 stmtList .

    SEMICOLON  shift, and go to state 30

    $default  reduce using rule 17 (elsePart)


State 77

   22 whileStmt: WHILE $@3 bExp $@4 COLON stmtList $@5 END .

    $default  reduce using rule 22 (whileStmt)
